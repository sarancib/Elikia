package Candidatures;


import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import Entities.Candidacy;
import Entities.Contact;
import Interfaces.UserintRemote;
import javafx.beans.property.SimpleObjectProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;

public class DecisionsController  implements  Initializable {
	
	
	@FXML
	private TableView tableId11;
	@FXML
	private TableColumn ComnName11;
	@FXML
	private TableColumn<Contact, String> ComnName1;
	@FXML
	private TableColumn columnType1;
	@FXML
	private TableColumn da;
	@FXML
	private TableColumn<Contact, String> pw;
	@FXML
	private TableColumn<Candidacy, String> na;
	@FXML
	private TableView tableId1;

	@FXML
	private Button back;
	
	@FXML
	private Button excel;
	 List<Candidacy>  candidatures = new ArrayList<>();
	 List<Candidacy>  candidaturesA = new ArrayList<>();
	 List<Contact>  candidaturesR = new ArrayList<>();
		 
		 @FXML
		    private ObservableList<Candidacy> data_table;
		 @FXML
		    private ObservableList<Candidacy> data_tableA;
		 
		 
		 @FXML
		    private ObservableList<Contact> data_tableR;

	// Event Listener on Button[#back].onAction
	@FXML
	public void back(ActionEvent event) throws IOException {
		// TODO Autogenerated
		Node source = (Node) event.getSource();
        Stage stage = (Stage) source.getScene().getWindow();
        stage.close();
        
        Stage primaryStage= new Stage();
        FXMLLoader FL = new FXMLLoader(getClass().getResource("DisplayCFXML.fxml"));
        Parent root = FL.load();
        Scene scene = new Scene(root);
        primaryStage.setTitle("Acceuil");
        primaryStage.setScene(scene);
        primaryStage.show();
		
		
	}

	
	@FXML
	public void Getexcel(ActionEvent event) throws NamingException {
		// TODO Autogenerated

	   	 String jndiName="ElikiaSer-ear/ElikiaSer-ejb/UserImp!Interfaces.UserintRemote"; 
		    	Context context = new InitialContext();
		    	UserintRemote proxy=(UserintRemote) context.lookup(jndiName);
	   	
		    	HSSFWorkbook wb = new HSSFWorkbook();
			    HSSFSheet sheet = wb.createSheet("ma feuille");
		    	  candidaturesA= proxy.DisplayCandAccepted();
			      
			      
			      
			      for (int i = 0; i < candidaturesA.size(); i++) {
				   
			    	  HSSFRow row = sheet.createRow(i+1);
			    	  row.createCell((short)0).setCellValue(candidaturesA.get(i).getNomc());
			    	  row.createCell((short)1).setCellValue(candidaturesA.get(i).getCandidat().getNom());
			    	  row.createCell((short)2).setCellValue(candidaturesA.get(i).getCandidat().getPrenom());
			       	System.out.println(candidaturesA.get(i).getDecision());
			       }
		    
	    HSSFRow row = sheet.createRow(0);
	   // HSSFRow row1 = sheet.createRow(1);
	    HSSFCell cell = row.createCell((short)0);
	    cell.setCellValue("Candidacy s name");
	    
	   // HSSFCell cell1 = row.createCell((short)0);
	   
        
	    //cell.setCellValue("Candidacy s name");

	    row.createCell((short)1).setCellValue("candidate's lastname");
	    row.createCell((short)2).setCellValue("candidate's name");
	   //1.createCell((short)0).setCellValue("moataz");
	    
	    
	    FileOutputStream fileOut;
	    try {
	    	
	      fileOut = new FileOutputStream("D:/monfichier1111.xls");
	      wb.write(fileOut);
	      fileOut.close(); 
	      System.out.println("cv");
	    } catch (FileNotFoundException e) {
	      e.printStackTrace();
	    } catch (IOException e) {
	      e.printStackTrace();
	    }
	}

	
	
	
	
	 void LoadData() throws InterruptedException, NamingException {
	    	
	   	
	   	
	   	
	   	 String jndiName="ElikiaSer-ear/ElikiaSer-ejb/UserImp!Interfaces.UserintRemote"; 
		    	Context context = new InitialContext();
		    	UserintRemote proxy=(UserintRemote) context.lookup(jndiName);
	   	
	   	
	       
	       ComnName11.setCellValueFactory(new PropertyValueFactory<>("nomc"));
	       columnType1.setCellValueFactory(new PropertyValueFactory<>("msg"));
	       
	       
	       
	    
	       
	       
	       
	       
	       ComnName1.setCellValueFactory(
	    	        Contact -> {
	    	            SimpleObjectProperty property = new SimpleObjectProperty();
	    	            property.setValue(Contact.getValue().getC().getNom() +""+ Contact.getValue().getC().getPrenom());
	    	            return property;
	    	        });
	    	        
	    	        
	    
	        
	        
	       
	        
	        
	       /** dec.setCellValueFactory(new PropertyValueFactory<>("decision"));  **/
	        
	       /** pw.setCellValueFactory(contact -> {
	            SimpleObjectProperty property = new SimpleObjectProperty();
	            property.setValue(contact.getValue().getC().getAdresseMail());
	            return property;
	        });**/
	      na.setCellValueFactory(Candidacy -> {
	            SimpleObjectProperty property = new SimpleObjectProperty();
	            property.setValue(Candidacy.getValue().getCandidat().getNom() +""+ Candidacy.getValue().getCandidat().getPrenom());
	            return property;
	        });
	      da.setCellValueFactory(new PropertyValueFactory<>("decision"));
	       
	    	       
	    
	       data_tableA=FXCollections.observableArrayList();
	       data_table = FXCollections.observableArrayList();
	       data_tableR=FXCollections.observableArrayList();

	       //List<Candidacy>  candidatures = new ArrayList<>();
	       
	      candidaturesA= proxy.DisplayCandAccepted();
	      
	      
	      
	      
	      
	      for (int i = 0; i < candidaturesA.size(); i++) {
		       	
		       	
		       	
		         
	           data_tableA.add(candidaturesA.get(i));
	       	System.out.println(candidaturesA.get(i).getDecision());
	       }
	       tableId11.setItems(data_tableA);
	      
	       
	       
	       candidaturesR= proxy.DisplayMail();
		      
		      
		      
		      for (int i = 0; i < candidaturesR.size(); i++) {
			       	
		           data_tableR.add(candidaturesR.get(i));
		       	System.out.println(candidaturesR.get(i).getMsg());
		       }
		      tableId1.setItems(data_tableR);}
		      
	      
	   
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		try {
			LoadData();
		} catch ( Exception e) {
			
			e.getMessage();
		}
	}
}
