package Candidatures;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.text.Text;

import static Candidatures.DisplayCFXMLController.ep;


import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.Set;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import Entities.Candidacy;
import Entities.Langues;
import Entities.LanguesOff;
import Entities.PreacquisCand;
import Entities.Requirements;
import Interfaces.UserintRemote;
import javafx.application.Platform;
import javafx.event.ActionEvent;

import javafx.scene.layout.AnchorPane;

import javafx.scene.text.TextFlow;
import javafx.stage.Stage;
import javafx.scene.shape.Circle;

public class DetalCandController  implements  Initializable {
	@FXML
	private AnchorPane EspaceL;
	@FXML
	private TextFlow te;
	@FXML
	private Button ViewMotiv;
	@FXML
	private Button ButCand;
	@FXML
	private AnchorPane name;
	@FXML
	private Text n;
	@FXML
	private Label a;
	
	@FXML
	private Label bb;
	@FXML
	private Label r;
	@FXML
	private Button BtnPre;
	@FXML
	private Button btnChek;
	@FXML
	private Button btnAccept;
	@FXML
	private Button BtnRefuse;
	@FXML
	private Button profBut;
	@FXML
	private Button checks;
	@FXML
	private Button evaluate;
	@FXML
	private Circle indicator;
	@FXML
	private Button back;
	private Candidacy c;
	private static  int f ;
	

	// Event Listener on Button[#ViewMotiv].onAction
	@FXML
	public void afficherMotiv(ActionEvent event) {
		
		te.getChildren().clear();
		String g;
		g=" easty de lemondae is my dad " ;
		Text text1 = new Text(g);
		/**try {JazzyTest2 js=new JazzyTest2(g,g);
		System.out.println(js.printWordsInMisspelledList()
				);
		}
		catch (Exception hhf)
		{
			System.out.println(hhf.getMessage());
			
			
		}**/
		
		
		/**Iterator it = js.getListOfMisspelledWords().iterator();
	    while (it.hasNext())
	    {
	      System.out.println("listOfMisspelledWords: " + it.next());
	    }**/
		
		//System.out.println(c.getCandidat().getNom());

	te.getChildren().add(new Text(c.getLettre_motivation()));
		// TODO Autogenerated
	}
	// Event Listener on Button[#ButCand].onAction
	@FXML
	public void afficherCand(ActionEvent event) {
		// TODO Autogenerated
		te.getChildren().clear();
		te.getChildren().add(new Text(c.getLettre_candidature()));
	}
	// Event Listener on Button[#BtnPre].onAction
	@FXML
	public void afficherPre(ActionEvent event) throws NamingException {
		String jndiName="ElikiaSer-ear/ElikiaSer-ejb/UserImp!Interfaces.UserintRemote"; 
	  	Context context = new InitialContext();
	  	UserintRemote proxy=(UserintRemote) context.lookup(jndiName);
		
	  	te.getChildren().clear();
		
		
Set<Langues>langues= new HashSet();	
		

	langues=ep.getCandidat().getLangues();
	System.out.println(langues);
	List<LanguesOff>languesOff= new ArrayList();	
	List<String>langueslist= new ArrayList();
	List<String>languesOfflist= new ArrayList();	
	
	languesOff=ep.getOffre().getLanguesOf();
			System.out.println(languesOff);
		
		String Skillss=" speak these language ";
		String SkillsL="  must speak these language to be selected for this offer ";
		
		for(Langues mol : langues) {
            System.out.println(mol.getLangue());
            langueslist.add(mol.getLangue());
            Skillss= Skillss+mol.getLangue()+"\n";
        }
		
		for(LanguesOff mol1 : languesOff) {
            System.out.println(mol1.getLangue());
            langueslist.add(mol1.getLangue());
            SkillsL= SkillsL+mol1.getLangue()+"\n";
        }
		
		System.out.println(Skillss+"cand");
		System.out.println(SkillsL+"offer");
		
		
		
		List<String> similarr =new ArrayList(langues);
        List<String> differentt = new ArrayList();
        differentt.addAll(langueslist);
        differentt.addAll(languesOfflist);
        
        similarr.retainAll( languesOfflist);
        differentt.removeAll( similarr );
		
		
		
        
        
        String diff ="";
        String simm="";
       
        for(String v : similarr) {
            //System.out.println(mol.getAcquis());
           // chaineP.add(mol.getAcquis());
            simm= simm+v.toString()+" ";
        }
        for(String x : differentt) {
           // System.out.println(mol.getAcquis());
            diff=diff+x.toString()+" ";
       
        }
        
      
        te.getChildren().addAll(new Text(" this candidate :"+Skillss+"\n"),new Text(":"+SkillsL+"\n"));
        te.getChildren().add(new Text(" he matches these language:"+simm+"\n"));
        te.getChildren().add(new Text("he is missing these language:"+diff+"\n"));
		
		
		//te.getChildren().add(new Text(Skills));
	}
	// Event Listener on Button[#btnChek].onAction
	@FXML
	public void afficherComp(ActionEvent event) throws NamingException {
		String jndiName="ElikiaSer-ear/ElikiaSer-ejb/UserImp!Interfaces.UserintRemote"; 
	  	Context context = new InitialContext();
	  	UserintRemote proxy=(UserintRemote) context.lookup(jndiName);
	  	te.getChildren().clear();
		
		 List<String> chaineP =new ArrayList();
		 List<String> chainePO =new ArrayList();
		
List<Requirements>r= new ArrayList();	
		
		r=proxy.displayPreOffre(ep.getOffre().getId());
	
		for(Requirements mol : r) {
            System.out.println(mol.getDescription());
            chainePO.add(mol.getDescription());}
          
List<PreacquisCand>ro = new ArrayList();	
		
		ro=proxy.displayPreCand(ep.getCandidat().getId());
	
		for(PreacquisCand molk : ro) {
            System.out.println(molk.getAcquis());
            chaineP.add(molk.getAcquis());
        }
		
	
		  List<String> similar =new ArrayList(chainePO);
          List<String> different = new ArrayList();
          different.addAll(chainePO);
          different.addAll(chaineP);
          
          similar.retainAll( chaineP );
          different.removeAll( similar );
          
          
          String dif ="";
          String sim="";
          String req="";
          String sq="";
          for(String v : similar) {
              //System.out.println(mol.getAcquis());
             // chaineP.add(mol.getAcquis());
              sim= sim+v.toString()+" ";
          }
          for(String x : different) {
             // System.out.println(mol.getAcquis());
              dif=dif+x.toString()+" ";
         
          }
          for(String f : chainePO) {
              //System.out.println(mol.getAcquis());
             // chaineP.add(mol.getAcquis());
        	  req=req+f.toString()+" ";
        	  
          }
          
          
          for(String gg : chaineP) {
              //System.out.println(mol.getAcquis());
             // chaineP.add(mol.getAcquis());
        	  sq=sq+gg.toString()+" ";
        	  
          }
          
          
          te.getChildren().addAll(new Text(" this candidate have these  skils :"+sq+"\n"),new Text("and he must have thes skills de be selected :"+req+"\n"));
          te.getChildren().add(new Text(" he matches these skills:"+sim+"\n"));
          te.getChildren().add(new Text("he is missing these skills:"+dif+"\n"));
          
          System.out.printf("One:%s%nTwo:%s%nSimilar:%s%nDifferent:%s%n", chainePO, chaineP, similar, different);
	}
	// Event Listener on Button[#btnAccept].onAction
	@FXML
	public void accepter(ActionEvent event) throws NamingException {

		String jndiName="ElikiaSer-ear/ElikiaSer-ejb/UserImp!Interfaces.UserintRemote"; 
	  	Context context = new InitialContext();
	  	UserintRemote proxy=(UserintRemote) context.lookup(jndiName);
	  	
	  	
	  	
	  	

        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Confirmation");
        alert.setHeaderText("Confirmation");
        alert.setContentText("are you sure , you want to accept this candidacy and start the interviewing process ?");
        

        Optional<ButtonType> result = alert.showAndWait();
        if (result.get() == ButtonType.OK) {
        	
        	
        	
        	
        	
        	  
   
          	proxy.AcceptCand(ep.getId());
        	
    	  
    		
        } else {
            // ... user chose CANCEL or closed the dialog
        }
	  	
	  	
	  	
	  	
		// TODO Autogenerated
	}
	// Event Listener on Button[#BtnRefuse].onAction
	@FXML
	public void refuser(ActionEvent event) throws IOException, NamingException {
		String jndiName="ElikiaSer-ear/ElikiaSer-ejb/UserImp!Interfaces.UserintRemote"; 
	  	Context context = new InitialContext();
	  	UserintRemote proxy=(UserintRemote) context.lookup(jndiName);
	  	
	  	
	  

        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Confirmation");
        alert.setHeaderText("Confirmation");
        alert.setContentText("voulez vous ?");
        

        Optional<ButtonType> result = alert.showAndWait();
        if (result.get() == ButtonType.OK) {
        	
        	
        	
        	
        	
        	  
   	     Node source = (Node) event.getSource();
   	        Stage stage = (Stage) source.getScene().getWindow();
   	        stage.close();
   	        
   	        Stage primaryStage= new Stage();
   	        FXMLLoader FLl = new FXMLLoader(getClass().getResource("Msg.fxml"));
   	        
   	        Parent root = FLl.load();
   	        
   	      
   	        Scene scene = new Scene(root);
   	        primaryStage.setTitle("refuse");
   	        primaryStage.setScene(scene);
   	        
   	       
   	        primaryStage.show();
        	
        	
    	  
    		
        } else {
            // ... user chose CANCEL or closed the dialog
        }
	}
	
	// Event Listener on Button[#profBut].onAction
	@FXML
	public void afficherDetail(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#checks].onAction
	@FXML
	public void checkspell(ActionEvent event) {
		// TODO Autogenerated
		te.getChildren().clear();
		te.getChildren().add(new Text(c.getLettre_candidature()));
	}
	// Event Listener on Button[#evaluate].onAction
	@FXML
	public void Evaluate(ActionEvent event) {
		// TODO Autogenerated
		te.getChildren().clear();
		te.getChildren().add(new Text(c.getLettre_candidature()));
	}
	// Event Listener on Button[#back].onAction
	@FXML
	public void back(ActionEvent event) throws IOException {
		// TODO Autogenerated
		Node source = (Node) event.getSource();
        Stage stage = (Stage) source.getScene().getWindow();
        stage.close();
        
        Stage primaryStage= new Stage();
        FXMLLoader FL = new FXMLLoader(getClass().getResource("DisplayCFXML.fxml"));
        Parent root = FL.load();
        Scene scene = new Scene(root);
        primaryStage.setTitle("Acceuil");
        primaryStage.setScene(scene);
        primaryStage.show();
	}
	
	int calcul( ) throws NamingException
	{
		String jndiName="ElikiaSer-ear/ElikiaSer-ejb/UserImp!Interfaces.UserintRemote"; 
	  	Context context = new InitialContext();
	  	UserintRemote proxy=(UserintRemote) context.lookup(jndiName);
	  	
		f = proxy.nombreCand(1);
		System.out.println(f);
		return(f);
	}
	
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		
		Platform.runLater(() -> {

			
	        //do stuff

	    });
		//System.out.println(errors);
		
		
		//System.out.println(c.getCandidat().getNom());
		/**int hhqh=c.getOffre().getId();
		System.out.println(hhqh);**/
		
			String ll= ep.getOffre().getType();
			a.setText( ll);
		try {
			f=calcul();
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			r.setText( Integer.toString(f));
			
			
		
		
		
		n.setText(ep.getCandidat().getNom()+" "+ep.getCandidat().getPrenom());
		System.out.println(ep.getCandidat().getNom());
	}
	
	public void setCa(Candidacy c){
	    this.c = c;
	}
	
	}

